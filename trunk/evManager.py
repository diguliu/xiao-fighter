from pygame.locals import *
import pygame

def Debug(msg, _type='Message'):
    print '     %s: %s' % (_type, msg)

class Event:
    """
    This is a superclass for any events that might be generated by an object
    and sent to the EventManager
    """
    def __init__(self):
        self.name = 'Generic Event'

class TickEvent(Event):
    def __init__(self):
        self.name = 'CPU Tick Event'

class QuitEvent(Event):
    def __init__(self):
        self.name = 'Program Quit Event'

class MapBuiltEvent(Event):
    def __init__(self, map):
        self.name = 'Map Finished Building Event'
        self.map = map

class GameStartedEvent(Event):
    def __init__(self, game):
        self.name = 'Game Started Event'
        self.game = game

class CharactorMoveRequest(Event):
    def __init__(self, direction):
        self.name = 'Charactor Move Request'
        self.direction = direction

class CharactorPlaceEvent(Event):
    """
    This event occurs when a Charactor is *placed* in a sector, ie it doesn't
    move there from an adjacent sector.
    """
    def __init__(self, charactor):
        self.name = 'Charactor Placement Event'
        self.charactor = charactor

class CharactorMoveEvent(Event):
    def __init__(self, charactor):
        self.name = 'Charactor Move Event'
        self.charactor = charactor

#From Rodrigo wrote all Events and Request

class CharactorAttackRequest(Event):
    def __init__(self, charactor):
        self.name = 'Charactor Attack Request'
        self.charactor = charactor

class CharactorAttackEvent(Event):
    def __init__(self,charactor):
        self.name = 'Charactor Attack Event'
        self.charactor = charactor

class CharactorJumpRequest(Event):
    def __init__(self, charactor):
        self.name = 'Charactor Jump Request'
        self.charactor = charactor

class CharactorJumpEvent(Event):
    def __init__(self,charactor):
        self.name = 'Charactor Jump Event'
        self.charactor = charactor

class CharactorStopJumpEvent(Event):
    def __init__(self, charactor):
        self.name = 'Charactor Stop Jump Event'
        self.charactor = charactor

class CharactorWalkEvent(Event):
    def __init__(self, direction, charactor):
        self.name = 'Charactor Walk Event Request'
        self.direction = direction
        self.charactor = charactor

class CharactorStopWalkEvent(Event):
    def __init__(self, direction, charactor):
        self.name = 'Charactor Stop Walk Request'
        self.direction = direction
        self.charactor = charactor

class CharactorRunEvent(Event):
    def __init__(self, charactor):
        self.name = 'Charactor Run Request'
        self.charactor = charactor

class CharactorStopRunEvent(Event):
    def __init__(self, charactor):
        self.name = 'Charactor Stop Run Request'
        self.charactor = charactor

class CharactorThroughRequest(Event):
    def __init__(self):
        self.name = 'Charactor Through Request'

class CharactorThroughEvent(Event):
    def __init__(self,charactor):
        self.name = 'Charactor Through Event'
        self.charactor = charactor

class CharactorPickItemRequest(Event):
    def __init__(self):
        self.name = 'Charactor Pick Item Request'

class CharactorPickItemEvent(Event):
    def __init__(self,charactor):
        self.name = 'Charactor Pick Item Event'
        self.charactor = charactor

class CharactorUseItemRequest(Event):
    def __init__(self):
        self.name = 'Charactor Use Item Request'

class CharactorUseItemEvent(Event):
    def __init__(self,charactor):
        self.name = 'Charactor Use Item Event'
        self.charactor = charactor

class CharactorDefendRequest(Event):
    def __init__(self, charactor):
        self.name = 'Charactor Defend Request'
        self.charactor = charactor

class CharactorDefendEvent(Event):
    def __init__(self,charactor):
        self.name = 'Charactor Defend Event'
        self.charactor = charactor

class CharactorGrabEvent(Event):
    def __init__(self,charactor):
        self.name = 'Charactor Through Event'
        self.charactor = charactor

class CharactorAdd2ComboRequest(Event):
    def __init__(self, key, charactor):
        self.name = 'Charactor Add2Combo Request'
        self.key = key
        self.charactor = charactor

class CharactorAdd2ComboEvent(Event):
    def __init__(self,charactor):
        self.name = 'Charactor Add2Combo Event'
        self.charactor = charactor

#------------------------------------------------------------------------------
class EventManager:
    def __init__(self):
        from weakref import WeakKeyDictionary
        self.listeners = WeakKeyDictionary()
        self.eventQueue = []

    #----------------------------------------------------------------------
    def RegisterListener(self, listener):
        self.listeners[listener] = 1

    #----------------------------------------------------------------------
    def UnregisterListener(self, listener):
        if listener in self.listeners.keys():
            del self.listeners[listener]
        
    #----------------------------------------------------------------------
    def Post(self, event):
        if not isinstance(event, TickEvent):
            Debug(event.name)
        for listener in self.listeners.keys():
            # NOTE: If the weakref has died, it will be automatically
            #       removed, so we do not need to worry about it.
            listener.Notify(event)

